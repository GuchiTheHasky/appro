name: Deploy to Chexie

on: [ workflow_dispatch ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa

    - name: Test SSH connection
      run: |
        ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ubuntu@${{ secrets.CHEXIE_IP }} "echo 'SSH connection successful'"

    - name: Backup application.yml on EC2
      run: |
        ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ubuntu@${{ secrets.CHEXIE_IP }} "cp /home/ubuntu/appro/app/appro-back/src/main/resources/application.yml /home/ubuntu/appro/application.yml.bak || true"

    - name: Create directory on EC2
      run: |
        ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ubuntu@${{ secrets.CHEXIE_IP }} "mkdir -p /home/ubuntu/appro/app"
        ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ubuntu@${{ secrets.CHEXIE_IP }} "mkdir -p /home/ubuntu/appro/mvn"

    - name: Clean directory on EC2
      run: |
        ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ubuntu@${{ secrets.CHEXIE_IP }} "rm -rf /home/ubuntu/appro/app/*"

    - name: Copy files to EC2
      run: |
        # scp -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa -r ./* ubuntu@${{ secrets.CHEXIE_IP }}:/home/ubuntu/appro/app
        rsync -avz --exclude 'application.yml' -e "ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa" ./ ubuntu@${{ secrets.CHEXIE_IP }}:/home/ubuntu/appro/app
    
    - name: Restore application.yml on EC2
      run: |
        ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ubuntu@${{ secrets.CHEXIE_IP }} "cp /home/ubuntu/appro/application.yml.bak /home/ubuntu/appro/app/appro-back/src/main/resources/application.yml || true"

    - name: Ensure Maven is installed on EC2
      run: |
        ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ubuntu@${{ secrets.CHEXIE_IP }} << 'EOF'
          if [ ! -d "/home/ubuntu/appro/mvn" ] || [ ! -x "/home/ubuntu/appro/mvn/bin/mvn" ]
          then
            echo "Maven not found. Installing Maven..."
            sudo apt-get update
            wget https://archive.apache.org/dist/maven/maven-3/3.6.3/binaries/apache-maven-3.6.3-bin.tar.gz
            tar -zxvf apache-maven-3.6.3-bin.tar.gz -C /home/ubuntu/appro/mvn --strip-components=1
            rm apache-maven-3.6.3-bin.tar.gz
            echo 'export MAVEN_HOME=/home/ubuntu/appro/mvn' >> ~/.bashrc
            echo 'export PATH=$MAVEN_HOME/bin:$PATH' >> ~/.bashrc
            source ~/.bashrc
          else
            echo "Maven is already installed."
          fi
        EOF

    - name: Check for mvnw and provide execute permissions
      run: |
        ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ubuntu@${{ secrets.CHEXIE_IP }} << 'EOF'
          cd /home/ubuntu/appro/app/appro-back
          if [ -f mvnw ]; then
            echo "mvnw found, setting execute permissions."
            chmod +x mvnw
          else
            echo "Error: mvnw not found."
            exit 1
          fi
        EOF

    - name: Set JAVA_HOME
      run: |
        ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ubuntu@${{ secrets.CHEXIE_IP }} "echo 'export JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64' >> ~/.profile && echo 'export PATH=\$JAVA_HOME/bin:\$PATH' >> ~/.profile && source ~/.profile"

    
    - name: Build and run backend on EC2
      run: |
        ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ubuntu@${{ secrets.CHEXIE_IP }} << 'EOF'
          cd /home/ubuntu/appro/app/appro-back
          
          # export SERVER_PORT="${{ secrets.SERVER_PORT }}"
          export APPRO_DB_URL="${{ secrets.APPRO_DB_URL }}"
          export DB_USERNAME="${{ secrets.DB_USERNAME }}"
          export DB_PASSWORD="${{ secrets.DB_PASSWORD }}"
          # export HUSKY_EMAIL="${{ secrets.HUSKY_EMAIL }}"
          # export HUSKY_EMAIL_API_KEY="${{ secrets.HUSKY_EMAIL_API_KEY }}"
          
          export MAVEN_HOME=/home/ubuntu/appro/mvn
          export PATH=$MAVEN_HOME/bin:$PATH

          # Надання виконуваних дозволів для mvnw
          chmod +x mvnw

          # Діагностика Flyway
          echo "Running Flyway migrations with the following configuration:"
          cat src/main/resources/application.yml
          
          cd /home/ubuntu/appro/app/appro-back
          ./mvnw flyway:migrate -Dflyway.url=${APPRO_DB_URL} -Dflyway.user=${DB_USERNAME} -Dflyway.password=${DB_PASSWORD}
          
          mvn clean package
          if [ $? -ne 0 ]; then
            echo "Error: mvn package failed."
            exit 1
          fi
          
          # nohup java -jar target/appro-back.jar > /dev/null 2>&1 &
          sudo java -jar target/appro-back.jar
          sleep 30
          if ! curl -s http://localhost:80/actuator/health | grep 'UP'; then
            echo "Error: Backend is not running."
            cat server.log
            exit 1
          fi
          
          echo "Backend is running successfully."
        EOF
