name: CI/CD
on:
  workflow_call:
    inputs:
      target:
        description: Target environment
        required: true
        type: string
      provider:
        description: Data provider
        required: true
        type: string
    secrets:
      IMAGE_REGISTRY_USER:
        required: true
      IMAGE_REGISTRY_PASSWORD:
        required: true
      INSTANCE_SSH_KEY:
        required: true
      INSTANCE_SSH_PORT:
        required: true
      INSTANCE_SSH_HOST:
        required: true
      INSTANCE_SSH_USER:
        required: true


  build_and_push:
    name: ${{ inputs.target }} CI/CD -- Data provider ${{ inputs.provider }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.IMAGE_REGISTRY_USER }}
          password: ${{ secrets.IMAGE_REGISTRY_PASSWORD }}

      - name: Docker Build and Push to DockerHub
        uses: docker/build-push-action@v4
        with:
          context: .
          build-args: |
            "PROFILE_ENV=${{ inputs.provider }}"
          tags: ${{ secrets.IMAGE_REGISTRY_USER }}/${{ inputs.target }}:latest
          push: true

  deploy:
    needs: build_and_push
    name: CD
      - name: Install SSH Key
        uses: shimataro/ssh-key-action@v2
          key: ${{ secrets.INSTANCE_SSH_KEY }}
          known_hosts: unnecessary
      - name: Adding Known Hosts
        run: ssh-keyscan -p ${{ secrets.INSTANCE_SSH_PORT }} -H ${{ secrets.INSTANCE_SSH_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy
        uses: appleboy/ssh-action@master
          host: ${{ secrets.INSTANCE_SSH_HOST }}
          username: ${{ secrets.INSTANCE_SSH_USER }}
          key: ${{ secrets.INSTANCE_SSH_KEY }}
          port: ${{ secrets.INSTANCE_SSH_PORT }}
          script: |
            docker login -u ${{ secrets.IMAGE_REGISTRY_USER }} -p ${{ secrets.IMAGE_REGISTRY_PASSWORD }}
            docker pull ${{ secrets.IMAGE_REGISTRY_USER }}/${{ inputs.target }}:latest
            docker stop my_container || true
            docker rm my_container || true
            docker run -d --name my_container -p 80:80 ${{ secrets.IMAGE_REGISTRY_USER }}/${{ inputs.target }}:latest

      - name: Verify Deployment
        run: |
          ssh -o StrictHostKeyChecking=no -i ${{ secrets.INSTANCE_SSH_KEY }} ${{ secrets.INSTANCE_SSH_USER }}@${{ secrets.INSTANCE_SSH_HOST }} "docker ps -a"





